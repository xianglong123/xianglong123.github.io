(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{737:function(a,s,n){"use strict";n.r(s);var t=n(0),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java-8-默认方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-8-默认方法"}},[a._v("#")]),a._v(" Java 8 - 默认方法")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),s("p",[a._v("理解Java 8 默认方法需理解几个问题 @123")]),a._v(" "),s("p",[a._v("为什么会出现默认方法?\n接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?\n多重实现的默认方法冲突怎么办?")])]),a._v(" "),s("ul",[s("li",[a._v("Java 8 - 默认方法\n"),s("ul",[s("li",[a._v("什么是默认方法，为什么要有默认方法\n"),s("ul",[s("li",[a._v("先上例子")]),a._v(" "),s("li",[a._v("什么是默认方法")]),a._v(" "),s("li",[a._v("为什么出现默认方法")])])]),a._v(" "),s("li",[a._v("java 8抽象类与接口对比")]),a._v(" "),s("li",[a._v("多重继承的冲突\n"),s("ul",[s("li",[a._v("举例子")])])]),a._v(" "),s("li",[a._v("总结")])])])]),a._v(" "),s("h3",{attrs:{id:"什么是默认方法-为什么要有默认方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是默认方法-为什么要有默认方法"}},[a._v("#")]),a._v(" # 什么是默认方法，为什么要有默认方法")]),a._v(" "),s("h3",{attrs:{id:"先上例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先上例子"}},[a._v("#")]),a._v(" # 先上例子")]),a._v(" "),s("blockquote",[s("p",[a._v("一个接口A，Clazz类实现了接口A。")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public interface A {\n    default void foo(){\n       System.out.println("Calling A.foo()");\n    }\n}\n\npublic class Clazz implements A {\n    public static void main(String[] args){\n       Clazz clazz = new Clazz();\n       clazz.foo();//调用A.foo()\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("blockquote",[s("p",[a._v("代码是可以编译的，即使Clazz类并没有实现foo()方法。在接口A中提供了foo()方法的默认实现。")])]),a._v(" "),s("h3",{attrs:{id:"什么是默认方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是默认方法"}},[a._v("#")]),a._v(" # 什么是默认方法")]),a._v(" "),s("blockquote",[s("p",[a._v("简单说，就是接口可以有实现方法，而且不需要实现类去实现其方法。只需在方法名前面加个default关键字即可。")])]),a._v(" "),s("h3",{attrs:{id:"为什么出现默认方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么出现默认方法"}},[a._v("#")]),a._v(" # 为什么出现默认方法")]),a._v(" "),s("blockquote",[s("p",[a._v("为什么要有这个特性? 首先，之前的接口是个双刃剑，好处是面向抽象而不是面向具体编程，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的java 8之前的集合框架没有foreach方法，通常能想到的解决办法是在JDK里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。他们的目的是为了解决接口的修改与现有的实现不兼容的问题。")])]),a._v(" "),s("h3",{attrs:{id:"java-8抽象类与接口对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-8抽象类与接口对比"}},[a._v("#")]),a._v(" # java 8抽象类与接口对比")]),a._v(" "),s("blockquote",[s("p",[a._v("这一个功能特性出来后，很多同学都反应了，java 8的接口都有实现方法了，跟抽象类还有什么区别? 其实还是有的，请看下表对比。。")])]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("相同点")]),a._v(" "),s("th",[a._v("不同点")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("都是抽象类型")]),a._v(" "),s("td",[a._v("抽象类不可以多重继承，接口可以(无论是多重类型继承还是多重行为继承)")])]),a._v(" "),s("tr",[s("td",[a._v("都可以有实现方法(以前接口不行)")]),a._v(" "),s("td",[a._v("抽象类和接口所反映出的设计理念不同。其实抽象类表示的是”is-a”关系，接口表示的是”like-a”关系")])]),a._v(" "),s("tr",[s("td",[a._v("都可以不需要实现类或者继承者去实现所有方法，(以前不行，现在接口中默认方法不需要实现者实现)")]),a._v(" "),s("td",[a._v("接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能改变其值；抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。")])])])]),a._v(" "),s("h3",{attrs:{id:"多重继承的冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多重继承的冲突"}},[a._v("#")]),a._v(" # 多重继承的冲突")]),a._v(" "),s("blockquote",[s("p",[a._v("由于同一个方法可以从不同接口引入，自然而然的会有冲突的现象，默认方法判断冲突的规则如下:")])]),a._v(" "),s("blockquote",[s("p",[a._v("1.一个声明在类里面的方法优先于任何默认方法(classes always win)")])]),a._v(" "),s("blockquote",[s("p",[a._v("2.否则，则会优先选取路径最短的。")])]),a._v(" "),s("h3",{attrs:{id:"举例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例子"}},[a._v("#")]),a._v(" # 举例子")]),a._v(" "),s("ul",[s("li",[a._v("Case 1")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public interface A{\n\tdefault void aa() {\n\t\tSystem.out.println("A\'s aa");\n\t}\n}\npublic interface B{\n\tdefault void aa() {\n\t\tSystem.out.println("B\'s aa");\n\t}\n}\npublic static class D implements A,B{\n\t\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("blockquote",[s("p",[a._v("报错 Duplicate default methods named aa with the parameters () and () are inherited from the types DocApplication.B and DocApplication.A")])]),a._v(" "),s("blockquote",[s("p",[a._v("如果一定要这么写呢，同时实现A,B并且使用A中aa? 可以这么写:")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("public static class D implements A,B{\n    @Override\n    public void aa(){\n        A.super.aa();\n    }\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("ul",[s("li",[a._v("Case 2")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public interface A{\n\tdefault void aa() {\n\t\tSystem.out.println("A\'s aa");\n\t}\n}\npublic interface B{\n\tdefault void aa() {\n\t\tSystem.out.println("B\'s aa");\n\t}\n}\npublic interface C extends A, B{\n\tdefault void aa() {\n\t\tSystem.out.println("C\'s aa");\n\t}\n}\npublic static class D implements A,B,C{\n\t\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br")])]),s("blockquote",[s("p",[a._v("输出 Cs aa")])]),a._v(" "),s("ul",[s("li",[a._v("Case 3")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public interface A{\n\tdefault void aa() {\n\t\tSystem.out.println("A\'s aa");\n\t}\n}\npublic interface C extends A{\n\tdefault void aa() {\n\t\tSystem.out.println("C\'s aa");\n\t}\n}\npublic static class D implements C{\n\t\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br")])]),s("blockquote",[s("p",[a._v("输出 Cs aa")])]),a._v(" "),s("blockquote",[s("blockquote",[s("p",[a._v("通过Case1-3可以知道它是找唯一的最短路径的default，如果是多个那么报错。")])])]),a._v(" "),s("ul",[s("li",[a._v("Case 4 如果想调用A的默认函数，则用到新语法X.super.m(…),下面修改C类，实现A接口，重写一个hello方法，如下所示:")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public interface A{\n\tdefault void aa() {\n\t\tSystem.out.println("A\'s aa");\n\t}\n}\npublic class X implements A{\n    @Override\n    public void aa(){\n        A.super.aa();\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("blockquote",[s("p",[a._v("输出: As aa")])]),a._v(" "),s("ul",[s("li",[a._v("Case 5")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public interface A{\n\tdefault void aa() {\n\t\tSystem.out.println("A\'s aa");\n\t}\n}\npublic interface B{\n\tdefault void aa() {\n\t\tSystem.out.println("B\'s aa");\n\t}\n}\npublic interface C extends A,B{\n\tdefault void aa() {\n\t\tSystem.out.println("C\'s aa");\n\t}\n}\npublic static class D implements C{\n\t@Override\n    public void aa(){\n        C.super.aa();\n    }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br")])]),s("blockquote",[s("p",[a._v("输出 Cs aa 可见C.super表示的是C接口，同时D无法访问A,B的aa")])]),a._v(" "),s("blockquote",[s("blockquote",[s("p",[a._v("通过Case 5也可以看出，C虽然有同一个两个最短路径的aa, 但是它自己有一个更高优先级的aa，所以不会报错; case 6 会报错")])])]),a._v(" "),s("ul",[s("li",[a._v("Case 6")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public interface A{\n\tdefault void aa() {\n\t\tSystem.out.println("A\'s aa");\n\t}\n}\npublic interface B{\n\tdefault void aa() {\n\t\tSystem.out.println("B\'s aa");\n\t}\n}\npublic interface C extends A,B{\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])]),s("blockquote",[s("p",[a._v("报错")])]),a._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" # 总结")]),a._v(" "),s("blockquote",[s("p",[a._v("默认方法给予我们修改接口而不破坏原来的实现类的结构提供了便利，目前java 8的集合框架已经大量使用了默认方法来改进了，当我们最终开始使用Java 8的lambdas表达式时，提供给我们一个平滑的过渡体验。也许将来我们会在API设计中看到更多的默认方法的应用。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);