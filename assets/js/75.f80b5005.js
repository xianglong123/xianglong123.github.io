(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{623:function(e,s,a){e.exports=a.p+"assets/img/java-thread-x-stpe-1.9972b333.png"},782:function(e,s,a){"use strict";a.r(s);var n=a(0),t=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"juc线程池-threadpoolexecutor详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#juc线程池-threadpoolexecutor详解"}},[e._v("#")]),e._v(" JUC线程池:ThreadPoolExecutor详解")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),s("p",[e._v("在很多业务场景中，我们可能需要周期性的运行某项任务来获取结果，比如周期数据统计，定时发送数据等。在并发包出现之前，Java 早在1.3就提供了 Timer 类(只需要了解，目前已渐渐被 ScheduledThreadPoolExecutor 代替)来适应这些业务场景。随着业务量的不断增大，我们可能需要多个工作线程运行任务来尽可能的增加产品性能，或者是需要更高的灵活性来控制和监控这些周期业务。这些都是 ScheduledThreadPoolExecutor 诞生的必然性。 @123")])]),e._v(" "),s("ul",[s("li",[e._v("JUC线程池: ScheduledThreadPoolExecutor详解\n"),s("ul",[s("li",[e._v("带着BAT大厂的面试问题去理解ScheduledThreadPoolExecutor")]),e._v(" "),s("li",[e._v("ScheduledThreadPoolExecutor简介")]),e._v(" "),s("li",[e._v("ScheduledThreadPoolExecutor数据结构")]),e._v(" "),s("li",[e._v("ScheduledThreadPoolExecutor源码解析\n"),s("ul",[s("li",[e._v("内部类ScheduledFutureTask\n"),s("ul",[s("li",[e._v("属性")]),e._v(" "),s("li",[e._v("核心方法run()")]),e._v(" "),s("li",[e._v("cancel方法")])])]),e._v(" "),s("li",[e._v("核心属性")]),e._v(" "),s("li",[e._v("构造函数")]),e._v(" "),s("li",[e._v("核心方法:Schedule")]),e._v(" "),s("li",[e._v("核心方法:scheduleAtFixedRate 和 scheduleWithFixedDelay")]),e._v(" "),s("li",[e._v("核心方法:shutdown()")])])]),e._v(" "),s("li",[e._v("再深入理解")]),e._v(" "),s("li",[e._v("参考文章")])])])]),e._v(" "),s("h3",{attrs:{id:"带着bat大厂的面试问题去理解scheduledthreadpoolexecutor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带着bat大厂的面试问题去理解scheduledthreadpoolexecutor"}},[e._v("#")]),e._v(" # 带着BAT大厂的面试问题去理解ScheduledThreadPoolExecutor")]),e._v(" "),s("blockquote",[s("p",[e._v("提示")])]),e._v(" "),s("blockquote",[s("p",[e._v("请带着这些问题继续后文，会很大程度上帮助你更好的理解ScheduledThreadPoolExecutor。@pdai")])]),e._v(" "),s("ul",[s("li",[e._v("ScheduledThreadPoolExecutor要解决什么样的问题?")]),e._v(" "),s("li",[e._v("ScheduledThreadPoolExecutor相比ThreadPoolExecutor有哪些特性?")]),e._v(" "),s("li",[e._v("ScheduledThreadPoolExecutor有什么样的数据结构，核心内部类和抽象类?")]),e._v(" "),s("li",[e._v("ScheduledThreadPoolExecutor有哪两个关闭策略? 区别是什么?")]),e._v(" "),s("li",[e._v("ScheduledThreadPoolExecutor中scheduleAtFixedRate 和 scheduleWithFixedDelay区别是什么?")]),e._v(" "),s("li",[e._v("为什么ThreadPoolExecutor 的调整策略却不适用于 ScheduledThreadPoolExecutor?")]),e._v(" "),s("li",[e._v("Executors 提供了几种方法来构造 ScheduledThreadPoolExecutor?")])]),e._v(" "),s("h3",{attrs:{id:"scheduledthreadpoolexecutor简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduledthreadpoolexecutor简介"}},[e._v("#")]),e._v(" # ScheduledThreadPoolExecutor简介")]),e._v(" "),s("blockquote",[s("p",[e._v("ScheduledThreadPoolExecutor继承自 ThreadPoolExecutor，为任务提供延迟或周期执行，属于线程池的一种。和 ThreadPoolExecutor 相比，它还具有以下几种特性:")])]),e._v(" "),s("ul",[s("li",[e._v("使用专门的任务类型—ScheduledFutureTask 来执行周期任务，也可以接收不需要时间调度的任务(这些任务通过 ExecutorService 来执行)。")]),e._v(" "),s("li",[e._v("使用专门的存储队列—DelayedWorkQueue 来存储任务，DelayedWorkQueue 是无界延迟队列DelayQueue 的一种。相比ThreadPoolExecutor也简化了执行机制(delayedExecute方法，后面单独分析)。")]),e._v(" "),s("li",[e._v("支持可选的run-after-shutdown参数，在池被关闭(shutdown)之后支持可选的逻辑来决定是否继续运行周期或延迟任务。并且当任务(重新)提交操作与 shutdown 操作重叠时，复查逻辑也不相同。")])]),e._v(" "),s("h3",{attrs:{id:"scheduledthreadpoolexecutor数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduledthreadpoolexecutor数据结构"}},[e._v("#")]),e._v(" # ScheduledThreadPoolExecutor数据结构")]),e._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:a(623),alt:""}})])]),e._v(" "),s("blockquote",[s("p",[e._v("ScheduledThreadPoolExecutor继承自 "),s("code",[e._v("ThreadPoolExecutor")]),e._v(":")])]),e._v(" "),s("ul",[s("li",[e._v("详情请参考: JUC线程池: ThreadPoolExecutor详解")])]),e._v(" "),s("blockquote",[s("p",[e._v("ScheduledThreadPoolExecutor 内部构造了两个内部类 "),s("code",[e._v("ScheduledFutureTask")]),e._v(" 和 "),s("code",[e._v("DelayedWorkQueue")]),e._v(":")])]),e._v(" "),s("ul",[s("li",[s("blockquote",[s("p",[s("code",[e._v("ScheduledFutureTask")]),e._v(": 继承了FutureTask，说明是一个异步运算任务；最上层分别实现了Runnable、Future、Delayed接口，说明它是一个可以延迟执行的异步运算任务。")])])]),e._v(" "),s("li",[s("blockquote",[s("p",[s("code",[e._v("DelayedWorkQueue")]),e._v(": 这是 ScheduledThreadPoolExecutor 为存储周期或延迟任务专门定义的一个延迟队列，继承了 AbstractQueue，为了契合 ThreadPoolExecutor 也实现了 BlockingQueue 接口。它内部只允许存储 RunnableScheduledFuture 类型的任务。与 DelayQueue 的不同之处就是它只允许存放 RunnableScheduledFuture 对象，并且自己实现了二叉堆(DelayQueue 是利用了 PriorityQueue 的二叉堆结构)。")])])])]),e._v(" "),s("h3",{attrs:{id:"scheduledthreadpoolexecutor源码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduledthreadpoolexecutor源码解析"}},[e._v("#")]),e._v(" # ScheduledThreadPoolExecutor源码解析")]),e._v(" "),s("blockquote",[s("blockquote",[s("p",[e._v("以下源码的解析是基于你已经理解了FutureTask。")])])]),e._v(" "),s("h3",{attrs:{id:"内部类scheduledfuturetask"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部类scheduledfuturetask"}},[e._v("#")]),e._v(" # 内部类ScheduledFutureTask")]),e._v(" "),s("h4",{attrs:{id:"属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[e._v("#")]),e._v(" # 属性")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//为相同延时任务提供的顺序编号\nprivate final long sequenceNumber;\n\n//任务可以执行的时间，纳秒级\nprivate long time;\n\n//重复任务的执行周期时间，纳秒级。\nprivate final long period;\n\n//重新入队的任务\nRunnableScheduledFuture<V> outerTask = this;\n\n//延迟队列的索引，以支持更快的取消操作\nint heapIndex;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("ul",[s("li",[s("code",[e._v("sequenceNumber")]),e._v(": 当两个任务有相同的延迟时间时，按照 FIFO 的顺序入队。sequenceNumber 就是为相同延时任务提供的顺序编号。")]),e._v(" "),s("li",[s("code",[e._v("time")]),e._v(": 任务可以执行时的时间，纳秒级，通过triggerTime方法计算得出。")]),e._v(" "),s("li",[s("code",[e._v("period")]),e._v(": 任务的执行周期时间，纳秒级。正数表示固定速率执行(为scheduleAtFixedRate提供服务)，负数表示固定延迟执行(为scheduleWithFixedDelay提供服务)，0表示不重复任务。")]),e._v(" "),s("li",[s("code",[e._v("outerTask")]),e._v(": 重新入队的任务，通过reExecutePeriodic方法入队重新排序。")])]),e._v(" "),s("h4",{attrs:{id:"核心方法run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心方法run"}},[e._v("#")]),e._v(" # 核心方法run()")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public void run() {\n    boolean periodic = isPeriodic();//是否为周期任务\n    if (!canRunInCurrentRunState(periodic))//当前状态是否可以执行\n        cancel(false);\n    else if (!periodic)\n        //不是周期任务，直接执行\n        ScheduledFutureTask.super.run();\n    else if (ScheduledFutureTask.super.runAndReset()) {\n        setNextRunTime();//设置下一次运行时间\n        reExecutePeriodic(outerTask);//重排序一个周期任务\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("blockquote",[s("p",[e._v("说明: ScheduledFutureTask 的run方法重写了 FutureTask 的版本，以便执行周期任务时重置/重排序任务。任务的执行通过父类 FutureTask 的run实现。内部有两个针对周期任务的方法:")])]),e._v(" "),s("ul",[s("li",[e._v("setNextRunTime(): 用来设置下一次运行的时间，源码如下:")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//设置下一次执行任务的时间\nprivate void setNextRunTime() {\n    long p = period;\n    if (p > 0)  //固定速率执行，scheduleAtFixedRate\n        time += p;\n    else\n        time = triggerTime(-p);  //固定延迟执行，scheduleWithFixedDelay\n}\n//计算固定延迟任务的执行时间\nlong triggerTime(long delay) {\n    return now() +\n        ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("ul",[s("li",[e._v("reExecutePeriodic(): 周期任务重新入队等待下一次执行，源码如下:")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//重排序一个周期任务\nvoid reExecutePeriodic(RunnableScheduledFuture<?> task) {\n    if (canRunInCurrentRunState(true)) {//池关闭后可继续执行\n        super.getQueue().add(task);//任务入列\n        //重新检查run-after-shutdown参数，如果不能继续运行就移除队列任务，并取消任务的执行\n        if (!canRunInCurrentRunState(true) && remove(task))\n            task.cancel(false);\n        else\n            ensurePrestart();//启动一个新的线程等待任务\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("blockquote",[s("p",[e._v("reExecutePeriodic与delayedExecute的执行策略一致，只不过reExecutePeriodic不会执行拒绝策略而是直接丢掉任务。")])]),e._v(" "),s("h4",{attrs:{id:"cancel方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cancel方法"}},[e._v("#")]),e._v(" # cancel方法")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public boolean cancel(boolean mayInterruptIfRunning) {\n    boolean cancelled = super.cancel(mayInterruptIfRunning);\n    if (cancelled && removeOnCancel && heapIndex >= 0)\n        remove(this);\n    return cancelled;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("blockquote",[s("p",[e._v("ScheduledFutureTask.cancel本质上由其父类 FutureTask.cancel 实现。取消任务成功后会根据removeOnCancel参数决定是否从队列中移除此任务。")])]),e._v(" "),s("h3",{attrs:{id:"核心属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心属性"}},[e._v("#")]),e._v(" # 核心属性")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("//关闭后继续执行已经存在的周期任务 \nprivate volatile boolean continueExistingPeriodicTasksAfterShutdown;\n\n//关闭后继续执行已经存在的延时任务 \nprivate volatile boolean executeExistingDelayedTasksAfterShutdown = true;\n\n//取消任务后移除 \nprivate volatile boolean removeOnCancel = false;\n\n//为相同延时的任务提供的顺序编号，保证任务之间的FIFO顺序\nprivate static final AtomicLong sequencer = new AtomicLong();\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("ul",[s("li",[s("blockquote",[s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"})])]),e._v(" "),s("p",[e._v("continueExistingPeriodicTasksAfterShutdown")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\n和\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("executeExistingDelayedTasksAfterShutdown")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\n是 ScheduledThreadPoolExecutor 定义的 `run-after-shutdown` 参数，用来控制池关闭之后的任务执行逻辑。\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])])]),e._v(" "),s("li",[s("blockquote",[s("p",[s("code",[e._v("removeOnCancel")]),e._v("用来控制任务取消后是否从队列中移除。当一个已经提交的周期或延迟任务在运行之前被取消，那么它之后将不会运行。默认配置下，这种已经取消的任务在届期之前不会被移除。 通过这种机制，可以方便检查和监控线程池状态，但也可能导致已经取消的任务无限滞留。为了避免这种情况的发生，我们可以通过")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("setRemoveOnCancelPolicy\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("方法设置移除策略，把参数"),s("code",[e._v("removeOnCancel")]),e._v("设为true可以在任务取消后立即从队列中移除。")])]),e._v(" "),s("li",[s("blockquote",[s("p",[s("code",[e._v("sequencer")]),e._v("是为相同延时的任务提供的顺序编号，保证任务之间的 FIFO 顺序。与 ScheduledFutureTask 内部的sequenceNumber参数作用一致。")])])])]),e._v(" "),s("h3",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[e._v("#")]),e._v(" # 构造函数")]),e._v(" "),s("blockquote",[s("p",[e._v("首先看下构造函数，ScheduledThreadPoolExecutor 内部有四个构造函数，这里我们只看这个最大构造灵活度的:")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public ScheduledThreadPoolExecutor(int corePoolSize,\n                                   ThreadFactory threadFactory,\n                                   RejectedExecutionHandler handler) {\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue(), threadFactory, handler);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("blockquote",[s("p",[e._v("构造函数都是通过super调用了ThreadPoolExecutor的构造，并且使用特定等待队列DelayedWorkQueue。")])]),e._v(" "),s("h3",{attrs:{id:"核心方法-schedule"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心方法-schedule"}},[e._v("#")]),e._v(" # 核心方法:Schedule")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public <V> ScheduledFuture<V> schedule(Callable<V> callable,\n                                       long delay,\n                                       TimeUnit unit) {\n    if (callable == null || unit == null)\n        throw new NullPointerException();\n    RunnableScheduledFuture<V> t = decorateTask(callable,\n        new ScheduledFutureTask<V>(callable, triggerTime(delay, unit)));//构造ScheduledFutureTask任务\n    delayedExecute(t);//任务执行主方法\n    return t;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("blockquote",[s("p",[e._v("说明: schedule主要用于执行一次性(延迟)任务。函数执行逻辑分两步:")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("封装 Callable/Runnable")]),e._v(": 首先通过triggerTime计算任务的延迟执行时间，然后通过 ScheduledFutureTask 的构造函数把 Runnable/Callable 任务构造为ScheduledThreadPoolExecutor可以执行的任务类型，最后调用decorateTask方法执行用户自定义的逻辑；decorateTask是一个用户可自定义扩展的方法，默认实现下直接返回封装的RunnableScheduledFuture任务，源码如下:")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("protected <V> RunnableScheduledFuture<V> decorateTask(\n    Runnable runnable, RunnableScheduledFuture<V> task) {\n    return task;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("ul",[s("li",[s("code",[e._v("执行任务")]),e._v(": 通过delayedExecute实现。下面我们来详细分析。")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("private void delayedExecute(RunnableScheduledFuture<?> task) {\n    if (isShutdown())\n        reject(task);//池已关闭，执行拒绝策略\n    else {\n        super.getQueue().add(task);//任务入队\n        if (isShutdown() &&\n            !canRunInCurrentRunState(task.isPeriodic()) &&//判断run-after-shutdown参数\n            remove(task))//移除任务\n            task.cancel(false);\n        else\n            ensurePrestart();//启动一个新的线程等待任务\n    }\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("blockquote",[s("p",[e._v("说明: delayedExecute是执行任务的主方法，方法执行逻辑如下:")])]),e._v(" "),s("ul",[s("li",[e._v("如果池已关闭(ctl >= SHUTDOWN)，执行任务拒绝策略；")]),e._v(" "),s("li",[e._v("池正在运行，首先把任务入队排序；然后重新检查池的关闭状态，执行如下逻辑:")])]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("A")]),e._v(": 如果池正在运行，或者 run-after-shutdown 参数值为true，则调用父类方法ensurePrestart启动一个新的线程等待执行任务。ensurePrestart源码如下:")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("void ensurePrestart() {\n    int wc = workerCountOf(ctl.get());\n    if (wc < corePoolSize)\n        addWorker(null, true);\n    else if (wc == 0)\n        addWorker(null, false);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("blockquote",[s("p",[e._v("ensurePrestart是父类 ThreadPoolExecutor 的方法，用于启动一个新的工作线程等待执行任务，即使corePoolSize为0也会安排一个新线程。")])]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("B")]),e._v(": 如果池已经关闭，并且 run-after-shutdown 参数值为false，则执行父类(ThreadPoolExecutor)方法remove移除队列中的指定任务，成功移除后调用ScheduledFutureTask.cancel取消任务")])]),e._v(" "),s("h3",{attrs:{id:"核心方法-scheduleatfixedrate-和-schedulewithfixeddelay"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心方法-scheduleatfixedrate-和-schedulewithfixeddelay"}},[e._v("#")]),e._v(" # 核心方法:scheduleAtFixedRate 和 scheduleWithFixedDelay")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/**\n * 创建一个周期执行的任务，第一次执行延期时间为initialDelay，\n * 之后每隔period执行一次，不等待第一次执行完成就开始计时\n */\npublic ScheduledFuture<?> scheduleAtFixedRate(Runnable command,\n                                              long initialDelay,\n                                              long period,\n                                              TimeUnit unit) {\n    if (command == null || unit == null)\n        throw new NullPointerException();\n    if (period <= 0)\n        throw new IllegalArgumentException();\n    //构建RunnableScheduledFuture任务类型\n    ScheduledFutureTask<Void> sft =\n        new ScheduledFutureTask<Void>(command,\n                                      null,\n                                      triggerTime(initialDelay, unit),//计算任务的延迟时间\n                                      unit.toNanos(period));//计算任务的执行周期\n    RunnableScheduledFuture<Void> t = decorateTask(command, sft);//执行用户自定义逻辑\n    sft.outerTask = t;//赋值给outerTask，准备重新入队等待下一次执行\n    delayedExecute(t);//执行任务\n    return t;\n}\n\n/**\n * 创建一个周期执行的任务，第一次执行延期时间为initialDelay，\n * 在第一次执行完之后延迟delay后开始下一次执行\n */\npublic ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,\n                                                 long initialDelay,\n                                                 long delay,\n                                                 TimeUnit unit) {\n    if (command == null || unit == null)\n        throw new NullPointerException();\n    if (delay <= 0)\n        throw new IllegalArgumentException();\n    //构建RunnableScheduledFuture任务类型\n    ScheduledFutureTask<Void> sft =\n        new ScheduledFutureTask<Void>(command,\n                                      null,\n                                      triggerTime(initialDelay, unit),//计算任务的延迟时间\n                                      unit.toNanos(-delay));//计算任务的执行周期\n    RunnableScheduledFuture<Void> t = decorateTask(command, sft);//执行用户自定义逻辑\n    sft.outerTask = t;//赋值给outerTask，准备重新入队等待下一次执行\n    delayedExecute(t);//执行任务\n    return t;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br")])]),s("blockquote",[s("p",[e._v("说明: scheduleAtFixedRate和scheduleWithFixedDelay方法的逻辑与schedule类似。")])]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("注意scheduleAtFixedRate和scheduleWithFixedDelay的区别")]),e._v(": 乍一看两个方法一模一样，其实，在unit.toNanos这一行代码中还是有区别的。没错，scheduleAtFixedRate传的是正值，而scheduleWithFixedDelay传的则是负值，这个值就是 ScheduledFutureTask 的period属性。")])]),e._v(" "),s("h3",{attrs:{id:"核心方法-shutdown"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心方法-shutdown"}},[e._v("#")]),e._v(" # 核心方法:shutdown()")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public void shutdown() {\n    super.shutdown();\n}\n//取消并清除由于关闭策略不应该运行的所有任务\n@Override void onShutdown() {\n    BlockingQueue<Runnable> q = super.getQueue();\n    //获取run-after-shutdown参数\n    boolean keepDelayed =\n        getExecuteExistingDelayedTasksAfterShutdownPolicy();\n    boolean keepPeriodic =\n        getContinueExistingPeriodicTasksAfterShutdownPolicy();\n    if (!keepDelayed && !keepPeriodic) {//池关闭后不保留任务\n        //依次取消任务\n        for (Object e : q.toArray())\n            if (e instanceof RunnableScheduledFuture<?>)\n                ((RunnableScheduledFuture<?>) e).cancel(false);\n        q.clear();//清除等待队列\n    }\n    else {//池关闭后保留任务\n        // Traverse snapshot to avoid iterator exceptions\n        //遍历快照以避免迭代器异常\n        for (Object e : q.toArray()) {\n            if (e instanceof RunnableScheduledFuture) {\n                RunnableScheduledFuture<?> t =\n                    (RunnableScheduledFuture<?>)e;\n                if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) ||\n                    t.isCancelled()) { // also remove if already cancelled\n                    //如果任务已经取消，移除队列中的任务\n                    if (q.remove(t))\n                        t.cancel(false);\n                }\n            }\n        }\n    }\n    tryTerminate(); //终止线程池\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br")])]),s("blockquote",[s("p",[e._v("说明: 池关闭方法调用了父类ThreadPoolExecutor的shutdown，具体分析见 ThreadPoolExecutor 篇。这里主要介绍以下在shutdown方法中调用的关闭钩子onShutdown方法，它的主要作用是在关闭线程池后取消并清除由于关闭策略不应该运行的所有任务，这里主要是根据 run-after-shutdown 参数(continueExistingPeriodicTasksAfterShutdown和executeExistingDelayedTasksAfterShutdown)来决定线程池关闭后是否关闭已经存在的任务。")])]),e._v(" "),s("h3",{attrs:{id:"再深入理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#再深入理解"}},[e._v("#")]),e._v(" # 再深入理解")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("为什么ThreadPoolExecutor 的调整策略却不适用于 ScheduledThreadPoolExecutor？")])])]),e._v(" "),s("blockquote",[s("p",[e._v("例如: 由于 ScheduledThreadPoolExecutor 是一个固定核心线程数大小的线程池，并且使用了一个无界队列，所以调整maximumPoolSize对其没有任何影响(所以 ScheduledThreadPoolExecutor 没有提供可以调整最大线程数的构造函数，默认最大线程数固定为Integer.MAX_VALUE)。此外，设置corePoolSize为0或者设置核心线程空闲后清除(allowCoreThreadTimeOut)同样也不是一个好的策略，因为一旦周期任务到达某一次运行周期时，可能导致线程池内没有线程去处理这些任务。")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Executors 提供了哪几种方法来构造 ScheduledThreadPoolExecutor？")]),e._v(" "),s("ul",[s("li",[e._v("newScheduledThreadPool: 可指定核心线程数的线程池。")]),e._v(" "),s("li",[e._v("newSingleThreadScheduledExecutor: 只有一个工作线程的线程池。如果内部工作线程由于执行周期任务异常而被终止，则会新建一个线程替代它的位置。")])])])]),e._v(" "),s("blockquote",[s("p",[e._v("注意: newScheduledThreadPool(1, threadFactory) 不等价于newSingleThreadScheduledExecutor。newSingleThreadScheduledExecutor创建的线程池保证内部只有一个线程执行任务，并且线程数不可扩展；而通过newScheduledThreadPool(1, threadFactory)创建的线程池可以通过setCorePoolSize方法来修改核心线程数。")])]),e._v(" "),s("h3",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" # 参考文章")]),e._v(" "),s("ul",[s("li",[e._v("文章主要参考自泰迪的bagwell的https://www.jianshu.com/p/8c97953f2751，在此基础上做了增改。")])])])}),[],!1,null,null,null);s.default=t.exports}}]);