(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{747:function(a,s,t){"use strict";t.r(s);var e=t(0),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java-8-类型推断优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-8-类型推断优化"}},[a._v("#")]),a._v(" Java 8 - 类型推断优化")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),s("p",[a._v("理解Java 8 类型推断需理解几个问题: @123")]),a._v(" "),s("p",[a._v("什么是泛型\nJava7对泛型推断做了哪些优化\nJava8对此有做了哪些优化")])]),a._v(" "),s("ul",[s("li",[a._v("Java 8 - 类型推断优化\n"),s("ul",[s("li",[a._v("简单理解泛型")]),a._v(" "),s("li",[a._v("泛型的尴尬")]),a._v(" "),s("li",[a._v("java7的泛型类型推断改进")]),a._v(" "),s("li",[a._v("Java8的泛型类型推断改进")]),a._v(" "),s("li",[a._v("总结")])])])]),a._v(" "),s("h3",{attrs:{id:"简单理解泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单理解泛型"}},[a._v("#")]),a._v(" # 简单理解泛型")]),a._v(" "),s("blockquote",[s("p",[a._v("泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。通俗点将就是类型的变量。这种类型变量可以用在类、接口和方法的创建中。")])]),a._v(" "),s("blockquote",[s("p",[a._v("理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作:")])]),a._v(" "),s("blockquote",[s("p",[a._v("List"),s("Apple",[a._v(" box = new ArrayList"),s("Apple",[a._v("();box.add(new Apple());Apple apple =box.get(0);")])],1)],1)]),a._v(" "),s("blockquote",[s("p",[a._v("上面的代码自身已表达的很清楚: box是一个装有Apple对象的List。get方法返回一个Apple对象实例，这个过程不需要进行类型转换。没有泛型，上面的代码需要写成这样:")])]),a._v(" "),s("blockquote",[s("p",[a._v("Apple apple = (Apple)box.get(0);")])]),a._v(" "),s("h3",{attrs:{id:"泛型的尴尬"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型的尴尬"}},[a._v("#")]),a._v(" # 泛型的尴尬")]),a._v(" "),s("blockquote",[s("p",[a._v("泛型的最大优点是提供了程序的类型安全同时可以向后兼容，但也有尴尬的地方，就是每次定义时都要写明泛型的类型，这样显示指定不仅感觉有些冗长，最主要是很多程序员不熟悉泛型，因此很多时候不能够给出正确的类型参数，现在通过编译器自动推断泛型的参数类型，能够减少这样的情况，并提高代码可读性。")])]),a._v(" "),s("h3",{attrs:{id:"java7的泛型类型推断改进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java7的泛型类型推断改进"}},[a._v("#")]),a._v(" # java7的泛型类型推断改进")]),a._v(" "),s("blockquote",[s("p",[a._v("在以前的版本中使用泛型类型，需要在声明并赋值的时候，两侧都加上泛型类型。例如:")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Map<String, String> myMap = new HashMap<String, String>();\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("blockquote",[s("p",[a._v("你可能觉得:老子在声明变量的的时候已经指明了参数类型，为毛还要在初始化对象时再指定? 幸好，在Java SE 7中，这种方式得以改进，现在你可以使用如下语句进行声明并赋值:")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('Map<String, String> myMap = new HashMap<>(); //注意后面的"<>"\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("blockquote",[s("p",[a._v("在这条语句中，编译器会根据变量声明时的泛型类型自动推断出实例化HashMap时的泛型类型。再次提醒一定要注意new HashMap后面的<>，只有加上这个<>才表示是自动类型推断，否则就是非泛型类型的HashMap，并且在使用编译器编译源代码时会给出一个警告提示。")])]),a._v(" "),s("blockquote",[s("p",[a._v("但是: Java SE 7在创建泛型实例时的类型推断是有限制的: 只有构造器的参数化类型在上下文中被显著的声明了，才可以使用类型推断，否则不行。例如: 下面的例子在java 7无法正确编译(但现在在java8里面可以编译，因为根据方法参数来自动推断泛型的类型):")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('List<String> list = new ArrayList<>();\nlist.add("A");// 由于addAll期望获得Collection<? extends String>类型的参数，因此下面的语句无法通过\nlist.addAll(new ArrayList<>());\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h3",{attrs:{id:"java8的泛型类型推断改进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java8的泛型类型推断改进"}},[a._v("#")]),a._v(" # Java8的泛型类型推断改进")]),a._v(" "),s("blockquote",[s("p",[a._v("java8里面泛型的目标类型推断主要2个:")])]),a._v(" "),s("blockquote",[s("p",[a._v("1.支持通过方法上下文推断泛型目标类型")])]),a._v(" "),s("blockquote",[s("p",[a._v("2.支持在方法调用链路当中，泛型类型推断传递到最后一个方法")])]),a._v(" "),s("blockquote",[s("p",[a._v("让我们看看官网的例子")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("class List<E> {\n   static <Z> List<Z> nil() { ... };\n   static <Z> List<Z> cons(Z head, List<Z> tail) { ... };\n   E head() { ... }\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("blockquote",[s("p",[a._v("根据JEP101的特性，我们在调用上面方法的时候可以这样写")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("//通过方法赋值的目标参数来自动推断泛型的类型\nList<String> l = List.nil();\n//而不是显示的指定类型\n//List<String> l = List.<String>nil();\n//通过前面方法参数类型推断泛型的类型\nList.cons(42, List.nil());\n//而不是显示的指定类型\n//List.cons(42, List.<Integer>nil());\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" # 总结")]),a._v(" "),s("blockquote",[s("p",[a._v("以上是JEP101的特性内容了，Java作为静态语言的代表者，可以说类型系统相当丰富。导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。 虽然说是小进步，但对于我们天天写代码的程序员，肯定能带来巨大的作用，至少心情更愉悦了")])])])}),[],!1,null,null,null);s.default=n.exports}}]);