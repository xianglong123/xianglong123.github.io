(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{414:function(t,a,e){t.exports=e.p+"assets/img/java_collections_overview.d715c9c4.png"},718:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"collection-类关系图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection-类关系图"}},[t._v("#")]),t._v(" Collection 类关系图")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。@123")])]),t._v(" "),a("ul",[a("li",[t._v("Collection 类关系图\n"),a("ul",[a("li",[t._v("知识体系结构")]),t._v(" "),a("li",[t._v("介绍")]),t._v(" "),a("li",[t._v("Collection\n"),a("ul",[a("li",[t._v("Set\n"),a("ul",[a("li",[t._v("TreeSet")]),t._v(" "),a("li",[t._v("HashSet")]),t._v(" "),a("li",[t._v("LinkedHashSet")])])]),t._v(" "),a("li",[t._v("List\n"),a("ul",[a("li",[t._v("ArrayList")]),t._v(" "),a("li",[t._v("Vector")]),t._v(" "),a("li",[t._v("LinkedList")])])]),t._v(" "),a("li",[t._v("Queue\n"),a("ul",[a("li",[t._v("LinkedList")]),t._v(" "),a("li",[t._v("PriorityQueue")])])])])]),t._v(" "),a("li",[t._v("Map\n"),a("ul",[a("li",[t._v("TreeMap")]),t._v(" "),a("li",[t._v("HashMap")]),t._v(" "),a("li",[t._v("HashTable")]),t._v(" "),a("li",[t._v("LinkedHashMap")])])]),t._v(" "),a("li",[t._v("参考内容")])])])]),t._v(" "),a("h3",{attrs:{id:"知识体系结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识体系结构"}},[t._v("#")]),t._v(" # 知识体系结构")]),t._v(" "),a("blockquote",[a("p",[a("img",{attrs:{src:e(414),alt:""}})])]),t._v(" "),a("h3",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" # 介绍")]),t._v(" "),a("blockquote",[a("p",[t._v("容器，就是可以容纳其他Java对象的对象。*Java Collections Framework(JCF)*为Java开发者提供了通用的容器，其始于JDK 1.2，优点是:")])]),t._v(" "),a("ul",[a("li",[t._v("降低编程难度")]),t._v(" "),a("li",[t._v("提高程序性能")]),t._v(" "),a("li",[t._v("提高API间的互操作性")]),t._v(" "),a("li",[t._v("降低学习难度")]),t._v(" "),a("li",[t._v("降低设计和实现相关API的难度")]),t._v(" "),a("li",[t._v("增加程序的重用性")])]),t._v(" "),a("blockquote",[a("p",[t._v("Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。")])]),t._v(" "),a("h3",{attrs:{id:"collection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[t._v("#")]),t._v(" # Collection")]),t._v(" "),a("blockquote",[a("blockquote",[a("p",[t._v("容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表。")])])]),t._v(" "),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" # Set")]),t._v(" "),a("h4",{attrs:{id:"treeset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[t._v("#")]),t._v(" # TreeSet")]),t._v(" "),a("blockquote",[a("p",[t._v("基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。")])]),t._v(" "),a("h4",{attrs:{id:"hashset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[t._v("#")]),t._v(" # HashSet")]),t._v(" "),a("blockquote",[a("p",[t._v("基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。")])]),t._v(" "),a("h4",{attrs:{id:"linkedhashset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset"}},[t._v("#")]),t._v(" # LinkedHashSet")]),t._v(" "),a("blockquote",[a("p",[t._v("具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。")])]),t._v(" "),a("h3",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" # List")]),t._v(" "),a("h4",{attrs:{id:"arraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[t._v("#")]),t._v(" # ArrayList")]),t._v(" "),a("blockquote",[a("p",[t._v("基于动态数组实现，支持随机访问。")])]),t._v(" "),a("h4",{attrs:{id:"vector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vector"}},[t._v("#")]),t._v(" # Vector")]),t._v(" "),a("blockquote",[a("p",[t._v("和 ArrayList 类似，但它是线程安全的。")])]),t._v(" "),a("h4",{attrs:{id:"linkedlist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[t._v("#")]),t._v(" # LinkedList")]),t._v(" "),a("blockquote",[a("p",[t._v("基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。")])]),t._v(" "),a("h3",{attrs:{id:"queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" # Queue")]),t._v(" "),a("h4",{attrs:{id:"linkedlist-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist-2"}},[t._v("#")]),t._v(" # LinkedList")]),t._v(" "),a("blockquote",[a("p",[t._v("可以用它来实现双向队列。")])]),t._v(" "),a("h4",{attrs:{id:"priorityqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#priorityqueue"}},[t._v("#")]),t._v(" # PriorityQueue")]),t._v(" "),a("blockquote",[a("p",[t._v("基于堆结构实现，可以用它来实现优先队列。")])]),t._v(" "),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" # Map")]),t._v(" "),a("h3",{attrs:{id:"treemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[t._v("#")]),t._v(" # TreeMap")]),t._v(" "),a("blockquote",[a("p",[t._v("基于红黑树实现。")])]),t._v(" "),a("h3",{attrs:{id:"hashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" # HashMap")]),t._v(" "),a("blockquote",[a("p",[t._v("基于哈希表实现。")])]),t._v(" "),a("h3",{attrs:{id:"hashtable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashtable"}},[t._v("#")]),t._v(" # HashTable")]),t._v(" "),a("blockquote",[a("p",[t._v("和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。")])]),t._v(" "),a("h3",{attrs:{id:"linkedhashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap"}},[t._v("#")]),t._v(" # LinkedHashMap")]),t._v(" "),a("blockquote",[a("p",[t._v("使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。")])]),t._v(" "),a("h3",{attrs:{id:"参考内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考内容"}},[t._v("#")]),t._v(" # 参考内容")]),t._v(" "),a("ul",[a("li",[t._v("CarpenterLee/JCFInternals https://github.com/CarpenterLee/JCFInternals")])])])}),[],!1,null,null,null);a.default=r.exports}}]);