(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{783:function(n,s,a){"use strict";a.r(s);var e=a(0),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"juc工具类-exchanger详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#juc工具类-exchanger详解"}},[n._v("#")]),n._v(" JUC工具类:Exchanger详解")]),n._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[n._v("提示")]),n._v(" "),s("p",[n._v("Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。 @123")])]),n._v(" "),s("ul",[s("li",[n._v("JUC工具类: Exchanger详解\n"),s("ul",[s("li",[n._v("带着BAT大厂的面试问题去理解Exchanger")]),n._v(" "),s("li",[n._v("Exchanger简介")]),n._v(" "),s("li",[n._v("Exchanger实现机制")]),n._v(" "),s("li",[n._v("Exchanger源码解析\n"),s("ul",[s("li",[n._v("内部类 - Participant")]),n._v(" "),s("li",[n._v("内部类 - Node")]),n._v(" "),s("li",[n._v("核心属性")]),n._v(" "),s("li",[n._v("构造函数")]),n._v(" "),s("li",[n._v("核心方法 - exchange(V x)")]),n._v(" "),s("li",[n._v("slotExchange(Object item, boolean timed, long ns)")]),n._v(" "),s("li",[n._v("arenaExchange(Object item, boolean timed, long ns)")])])]),n._v(" "),s("li",[n._v("参考文章")])])])]),n._v(" "),s("h3",{attrs:{id:"带着bat大厂的面试问题去理解exchanger"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带着bat大厂的面试问题去理解exchanger"}},[n._v("#")]),n._v(" # 带着BAT大厂的面试问题去理解Exchanger")]),n._v(" "),s("blockquote",[s("p",[n._v("提示")])]),n._v(" "),s("blockquote",[s("p",[n._v("请带着这些问题继续后文，会很大程度上帮助你更好的理解Exchanger。@pdai")])]),n._v(" "),s("ul",[s("li",[n._v("Exchanger主要解决什么问题?")]),n._v(" "),s("li",[n._v("对比SynchronousQueue，为什么说Exchanger可被视为 SynchronousQueue 的双向形式?")]),n._v(" "),s("li",[n._v("Exchanger在不同的JDK版本中实现有什么差别?")]),n._v(" "),s("li",[n._v("Exchanger实现机制?")]),n._v(" "),s("li",[n._v("Exchanger已经有了slot单节点，为什么会加入arena node数组? 什么时候会用到数组?")]),n._v(" "),s("li",[n._v("arena可以确保不同的slot在arena中是不会相冲突的，那么是怎么保证的呢?")]),n._v(" "),s("li",[n._v("什么是伪共享，Exchanger中如何体现的?")]),n._v(" "),s("li",[n._v("Exchanger实现举例")])]),n._v(" "),s("h3",{attrs:{id:"exchanger简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exchanger简介"}},[n._v("#")]),n._v(" # Exchanger简介")]),n._v(" "),s("blockquote",[s("p",[n._v("Exchanger用于进行两个线程之间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。这两个线程通过exchange()方法交换数据，当一个线程先执行exchange()方法后，它会一直等待第二个线程也执行exchange()方法，当这两个线程到达同步点时，这两个线程就可以交换数据了。")])]),n._v(" "),s("h3",{attrs:{id:"exchanger实现机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exchanger实现机制"}},[n._v("#")]),n._v(" # Exchanger实现机制")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("for (;;) {\n    if (slot is empty) { // offer\n        // slot为空时，将item 设置到Node 中        \n        place item in a Node;\n        if (can CAS slot from empty to node) {\n            // 当将node通过CAS交换到slot中时，挂起线程等待被唤醒\n            wait for release;\n            // 被唤醒后返回node中匹配到的item\n            return matching item in node;\n        }\n    } else if (can CAS slot from node to empty) { // release\n         // 将slot设置为空\n        // 获取node中的item，将需要交换的数据设置到匹配的item\n        get the item in node;\n        set matching item in node;\n        // 唤醒等待的线程\n        release waiting thread;\n    }\n    // else retry on CAS failure\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("blockquote",[s("p",[n._v("比如有2条线程A和B，A线程交换数据时，发现slot为空，则将需要交换的数据放在slot中等待其它线程进来交换数据，等线程B进来，读取A设置的数据，然后设置线程B需要交换的数据，然后唤醒A线程，原理就是这么简单。但是当多个线程之间进行交换数据时就会出现问题，所以Exchanger加入了slot数组。")])]),n._v(" "),s("h3",{attrs:{id:"exchanger源码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exchanger源码解析"}},[n._v("#")]),n._v(" # Exchanger源码解析")]),n._v(" "),s("h3",{attrs:{id:"内部类-participant"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部类-participant"}},[n._v("#")]),n._v(" # 内部类 - Participant")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("static final class Participant extends ThreadLocal<Node> {\n    public Node initialValue() { return new Node(); }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("blockquote",[s("p",[n._v("Participant的作用是为每个线程保留唯一的一个Node节点, 它继承ThreadLocal，说明每个线程具有不同的状态。")])]),n._v(" "),s("h3",{attrs:{id:"内部类-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部类-node"}},[n._v("#")]),n._v(" # 内部类 - Node")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("@sun.misc.Contended static final class Node {\n     // arena的下标，多个槽位的时候利用\n    int index; \n    // 上一次记录的Exchanger.bound\n    int bound; \n    // 在当前bound下CAS失败的次数；\n    int collides;\n    // 用于自旋；\n    int hash; \n    // 这个线程的当前项，也就是需要交换的数据；\n    Object item; \n    //做releasing操作的线程传递的项；\n    volatile Object match; \n    //挂起时设置线程值，其他情况下为null；\n    volatile Thread parked;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("blockquote",[s("p",[n._v("在Node定义中有两个变量值得思考：bound以及collides。前面提到了数组area是为了避免竞争而产生的，如果系统不存在竞争问题，那么完全没有必要开辟一个高效的arena来徒增系统的复杂性。首先通过单个slot的exchanger来交换数据，当探测到竞争时将安排不同的位置的slot来保存线程Node，并且可以确保没有slot会在同一个缓存行上。如何来判断会有竞争呢? CAS替换slot失败，如果失败，则通过记录冲突次数来扩展arena的尺寸，我们在记录冲突的过程中会跟踪bound的值，以及会重新计算冲突次数在bound的值被改变时。")])]),n._v(" "),s("h3",{attrs:{id:"核心属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心属性"}},[n._v("#")]),n._v(" # 核心属性")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private final Participant participant;\nprivate volatile Node[] arena;\nprivate volatile Node slot;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("ul",[s("li",[s("code",[n._v("为什么会有")]),n._v("arena数组槽"),s("code",[n._v("?")])])]),n._v(" "),s("blockquote",[s("p",[n._v("slot为单个槽，arena为数组槽, 他们都是Node类型。在这里可能会感觉到疑惑，slot作为Exchanger交换数据的场景，应该只需要一个就可以了啊? 为何还多了一个Participant 和数组类型的arena呢? 一个slot交换场所原则上来说应该是可以的，但实际情况却不是如此，多个参与者使用同一个交换场所时，会存在严重伸缩性问题。既然单个交换场所存在问题，那么我们就安排多个，也就是数组arena。通过数组arena来安排不同的线程使用不同的slot来降低竞争问题，并且可以保证最终一定会成对交换数据。但是"),s("code",[n._v("Exchanger不是一来就会生成arena数组来降低竞争，只有当产生竞争是才会生成arena数组")]),n._v("。")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("那么怎么将Node与当前线程绑定呢？")])])]),n._v(" "),s("blockquote",[s("p",[n._v("Participant，Participant 的作用就是为每个线程保留唯一的一个Node节点，它继承ThreadLocal，同时在Node节点中记录在arena中的下标index。")])]),n._v(" "),s("h3",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[n._v("#")]),n._v(" # 构造函数")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n* Creates a new Exchanger.\n*/\npublic Exchanger() {\n    participant = new Participant();\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("blockquote",[s("p",[n._v("初始化participant对象。")])]),n._v(" "),s("h3",{attrs:{id:"核心方法-exchange-v-x"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心方法-exchange-v-x"}},[n._v("#")]),n._v(" # 核心方法 - exchange(V x)")]),n._v(" "),s("blockquote",[s("p",[n._v("等待另一个线程到达此交换点(除非当前线程被中断)，然后将给定的对象传送给该线程，并接收该线程的对象。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public V exchange(V x) throws InterruptedException {\n    Object v;\n    // 当参数为null时需要将item设置为空的对象\n    Object item = (x == null) ? NULL_ITEM : x; // translate null args\n    // 注意到这里的这个表达式是整个方法的核心\n    if ((arena != null ||\n            (v = slotExchange(item, false, 0 L)) == null) &&\n        ((Thread.interrupted() || // disambiguates null return\n            (v = arenaExchange(item, false, 0 L)) == null)))\n        throw new InterruptedException();\n    return (v == NULL_ITEM) ? null : (V) v;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("blockquote",[s("p",[n._v("这个方法比较好理解：arena为数组槽，如果为null，则执行slotExchange()方法，否则判断线程是否中断，如果中断值抛出InterruptedException异常，没有中断则执行arenaExchange()方法。整套逻辑就是：如果slotExchange(Object item, boolean timed, long ns)方法执行失败了就执行arenaExchange(Object item, boolean timed, long ns)方法，最后返回结果V。")])]),n._v(" "),s("blockquote",[s("p",[n._v("NULL_ITEM 为一个空节点，其实就是一个Object对象而已，slotExchange()为单个slot交换。")])]),n._v(" "),s("h3",{attrs:{id:"slotexchange-object-item-boolean-timed-long-ns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slotexchange-object-item-boolean-timed-long-ns"}},[n._v("#")]),n._v(" # slotExchange(Object item, boolean timed, long ns)")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("private final Object slotExchange(Object item, boolean timed, long ns) {\n    // 获取当前线程node对象\n    Node p = participant.get();\n    // 当前线程\n    Thread t = Thread.currentThread();\n    // 若果线程被中断，就直接返回null\n    if (t.isInterrupted()) // preserve interrupt status so caller can recheck\n        return null;\n\t// 自旋\n    for (Node q;;) {\n        // 将slot值赋给q\n        if ((q = slot) != null) {\n             // slot 不为null，即表示已有线程已经把需要交换的数据设置在slot中了\n\t\t\t// 通过CAS将slot设置成null\n            if (U.compareAndSwapObject(this, SLOT, q, null)) {\n                // CAS操作成功后，将slot中的item赋值给对象v，以便返回。\n                // 这里也是就读取之前线程要交换的数据\n                Object v = q.item;\n                // 将当前线程需要交给的数据设置在q中的match\n                q.match = item;\n                 // 获取被挂起的线程\n                Thread w = q.parked;\n                if (w != null)\n                    // 如果线程不为null，唤醒它\n                    U.unpark(w);\n                // 返回其他线程给的V\n                return v;\n            }\n            // create arena on contention, but continue until slot null\n            // CAS 操作失败，表示有其它线程竞争，在此线程之前将数据已取走\n            // NCPU:CPU的核数\n            // bound == 0 表示arena数组未初始化过，CAS操作bound将其增加SEQ\n            if (NCPU > 1 && bound == 0 &&\n                U.compareAndSwapInt(this, BOUND, 0, SEQ))\n                // 初始化arena数组\n                arena = new Node[(FULL + 2) << ASHIFT];\n        }\n        // 上面分析过，只有当arena不为空才会执行slotExchange方法的\n\t\t// 所以表示刚好已有其它线程加入进来将arena初始化\n        else if (arena != null)\n            // 这里就需要去执行arenaExchange\n            return null; // caller must reroute to arenaExchange\n        else {\n            // 这里表示当前线程是以第一个线程进来交换数据\n            // 或者表示之前的数据交换已进行完毕，这里可以看作是第一个线程\n            // 将需要交换的数据先存放在当前线程变量p中\n            p.item = item;\n            // 将需要交换的数据通过CAS设置到交换区slot\n            if (U.compareAndSwapObject(this, SLOT, null, p))\n                // 交换成功后跳出自旋\n                break;\n            // CAS操作失败，表示有其它线程刚好先于当前线程将数据设置到交换区slot\n            // 将当前线程变量中的item设置为null，然后自旋获取其它线程存放在交换区slot的数据\n            p.item = null;\n        }\n    }\n\n    // await release\n    // 执行到这里表示当前线程已将需要的交换的数据放置于交换区slot中了，\n    // 等待其它线程交换数据然后唤醒当前线程\n    int h = p.hash;\n    long end = timed ? System.nanoTime() + ns : 0 L;\n    // 自旋次数\n    int spins = (NCPU > 1) ? SPINS : 1;\n    Object v;\n    // 自旋等待直到p.match不为null，也就是说等待其它线程将需要交换的数据放置于交换区slot\n    while ((v = p.match) == null) {\n        // 下面的逻辑主要是自旋等待，直到spins递减到0为止\n        if (spins > 0) {\n            h ^= h << 1;\n            h ^= h >>> 3;\n            h ^= h << 10;\n            if (h == 0)\n                h = SPINS | (int) t.getId();\n            else if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)\n                Thread.yield();\n        } else if (slot != p)\n            spins = SPINS;\n        // 此处表示未设置超时或者时间未超时\n        else if (!t.isInterrupted() && arena == null &&\n            (!timed || (ns = end - System.nanoTime()) > 0 L)) {\n            // 设置线程t被当前对象阻塞\n            U.putObject(t, BLOCKER, this);\n            // 给p挂机线程的值赋值\n            p.parked = t;\n            if (slot == p)\n                // 如果slot还没有被置为null，也就表示暂未有线程过来交换数据，需要将当前线程挂起\n                U.park(false, ns);\n            // 线程被唤醒，将被挂起的线程设置为null\n            p.parked = null;\n            // 设置线程t未被任何对象阻塞\n            U.putObject(t, BLOCKER, null);\n        // 不是以上条件时(可能是arena已不为null或者超时)    \n        } else if (U.compareAndSwapObject(this, SLOT, p, null)) {\n             // arena不为null则v为null,其它为超时则v为超市对象TIMED_OUT，并且跳出循环\n            v = timed && ns <= 0 L && !t.isInterrupted() ? TIMED_OUT : null;\n            break;\n        }\n    }\n    // 取走match值，并将p中的match置为null\n    U.putOrderedObject(p, MATCH, null);\n    // 设置item为null\n    p.item = null;\n    p.hash = h;\n    // 返回交换值\n    return v;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br"),s("span",{staticClass:"line-number"},[n._v("107")]),s("br")])]),s("blockquote",[s("p",[n._v("程序首先通过participant获取当前线程节点Node。检测是否中断，如果中断return null，等待后续抛出InterruptedException异常。")])]),n._v(" "),s("ul",[s("li",[n._v("如果slot不为null，则进行slot消除，成功直接返回数据V，否则失败，则创建arena消除数组。")]),n._v(" "),s("li",[n._v("如果slot为null，但arena不为null，则返回null，进入arenaExchange逻辑。")]),n._v(" "),s("li",[n._v("如果slot为null，且arena也为null，则尝试占领该slot，失败重试，成功则跳出循环进入spin+block(自旋+阻塞)模式。")])]),n._v(" "),s("blockquote",[s("p",[n._v("在自旋+阻塞模式中，首先取得结束时间和自旋次数。如果match(做releasing操作的线程传递的项)为null，其首先尝试spins+随机次自旋(改自旋使用当前节点中的hash，并改变之)和退让。当自旋数为0后，假如slot发生了改变(slot != p)则重置自旋数并重试。否则假如：当前未中断&arena为null&(当前不是限时版本或者限时版本+当前时间未结束)：阻塞或者限时阻塞。假如：当前中断或者arena不为null或者当前为限时版本+时间已经结束：不限时版本：置v为null；限时版本：如果时间结束以及未中断则TIMED_OUT；否则给出null(原因是探测到arena非空或者当前线程中断)。")])]),n._v(" "),s("blockquote",[s("p",[n._v("match不为空时跳出循环。")])]),n._v(" "),s("h3",{attrs:{id:"arenaexchange-object-item-boolean-timed-long-ns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arenaexchange-object-item-boolean-timed-long-ns"}},[n._v("#")]),n._v(" # arenaExchange(Object item, boolean timed, long ns)")]),n._v(" "),s("blockquote",[s("p",[n._v("此方法被执行时表示多个线程进入交换区交换数据，arena数组已被初始化，此方法中的一些处理方式和slotExchange比较类似，它是通过遍历arena数组找到需要交换的数据。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// timed 为true表示设置了超时时间，ns为>0的值，反之没有设置超时时间\nprivate final Object arenaExchange(Object item, boolean timed, long ns) {\n    Node[] a = arena;\n    // 获取当前线程中的存放的node\n    Node p = participant.get();\n    //index初始值0\n    for (int i = p.index;;) { // access slot at i\n        // 遍历，如果在数组中找到数据则直接交换并唤醒线程，如未找到则将需要交换给其它线程的数据放置于数组中\n        int b, m, c;\n        long j; // j is raw array offset\n        // 其实这里就是向右遍历数组，只是用到了元素在内存偏移的偏移量\n        // q实际为arena数组偏移(i + 1) *  128个地址位上的node\n        Node q = (Node) U.getObjectVolatile(a, j = (i << ASHIFT) + ABASE);\n        // 如果q不为null，并且CAS操作成功，将下标j的元素置为null\n        if (q != null && U.compareAndSwapObject(a, j, q, null)) {\n            // 表示当前线程已发现有交换的数据，然后获取数据，唤醒等待的线程\n            Object v = q.item; // release\n            q.match = item;\n            Thread w = q.parked;\n            if (w != null)\n                U.unpark(w);\n            return v;\n        // q 为null 并且 i 未超过数组边界    \n        } else if (i <= (m = (b = bound) & MMASK) && q == null) {\n             // 将需要给其它线程的item赋予给p中的item\n            p.item = item; // offer\n            if (U.compareAndSwapObject(a, j, null, p)) {\n                // 交换成功\n                long end = (timed && m == 0) ? System.nanoTime() + ns : 0 L;\n                Thread t = Thread.currentThread(); // wait\n                // 自旋直到有其它线程进入，遍历到该元素并与其交换，同时当前线程被唤醒\n                for (int h = p.hash, spins = SPINS;;) {\n                    Object v = p.match;\n                    if (v != null) {\n                        // 其它线程设置的需要交换的数据match不为null\n                        // 将match设置null,item设置为null\n                        U.putOrderedObject(p, MATCH, null);\n                        p.item = null; // clear for next use\n                        p.hash = h;\n                        return v;\n                    } else if (spins > 0) {\n                        h ^= h << 1;\n                        h ^= h >>> 3;\n                        h ^= h << 10; // xorshift\n                        if (h == 0) // initialize hash\n                            h = SPINS | (int) t.getId();\n                        else if (h < 0 && // approx 50% true\n                            (--spins & ((SPINS >>> 1) - 1)) == 0)\n                            Thread.yield(); // two yields per wait\n                    } else if (U.getObjectVolatile(a, j) != p)\n                        // 和slotExchange方法中的类似，arena数组中的数据已被CAS设置\n                       // match值还未设置，让其再自旋等待match被设置\n                        spins = SPINS; // releaser hasn't set match yet\n                    else if (!t.isInterrupted() && m == 0 &&\n                        (!timed ||\n                            (ns = end - System.nanoTime()) > 0 L)) {\n                        // 设置线程t被当前对象阻塞\n                        U.putObject(t, BLOCKER, this); // emulate LockSupport\n                         // 线程t赋值\n                        p.parked = t; // minimize window\n                        if (U.getObjectVolatile(a, j) == p)\n                            // 数组中对象还相等，表示线程还未被唤醒，唤醒线程\n                            U.park(false, ns);\n                        p.parked = null;\n                         // 设置线程t未被任何对象阻塞\n                        U.putObject(t, BLOCKER, null);\n                    } else if (U.getObjectVolatile(a, j) == p &&\n                        U.compareAndSwapObject(a, j, p, null)) {\n                        // 这里给bound增加加一个SEQ\n                        if (m != 0) // try to shrink\n                            U.compareAndSwapInt(this, BOUND, b, b + SEQ - 1);\n                        p.item = null;\n                        p.hash = h;\n                        i = p.index >>>= 1; // descend\n                        if (Thread.interrupted())\n                            return null;\n                        if (timed && m == 0 && ns <= 0 L)\n                            return TIMED_OUT;\n                        break; // expired; restart\n                    }\n                }\n            } else\n                // 交换失败，表示有其它线程更改了arena数组中下标i的元素\n                p.item = null; // clear offer\n        } else {\n            // 此时表示下标不在bound & MMASK或q不为null但CAS操作失败\n           // 需要更新bound变化后的值\n            if (p.bound != b) { // stale; reset\n                p.bound = b;\n                p.collides = 0;\n                // 反向遍历\n                i = (i != m || m == 0) ? m : m - 1;\n            } else if ((c = p.collides) < m || m == FULL ||\n                !U.compareAndSwapInt(this, BOUND, b, b + SEQ + 1)) {\n                 // 记录CAS失败的次数\n                p.collides = c + 1;\n                // 循环遍历\n                i = (i == 0) ? m : i - 1; // cyclically traverse\n            } else\n                // 此时表示bound值增加了SEQ+1\n                i = m + 1; // grow\n            // 设置下标\n            p.index = i;\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br"),s("span",{staticClass:"line-number"},[n._v("80")]),s("br"),s("span",{staticClass:"line-number"},[n._v("81")]),s("br"),s("span",{staticClass:"line-number"},[n._v("82")]),s("br"),s("span",{staticClass:"line-number"},[n._v("83")]),s("br"),s("span",{staticClass:"line-number"},[n._v("84")]),s("br"),s("span",{staticClass:"line-number"},[n._v("85")]),s("br"),s("span",{staticClass:"line-number"},[n._v("86")]),s("br"),s("span",{staticClass:"line-number"},[n._v("87")]),s("br"),s("span",{staticClass:"line-number"},[n._v("88")]),s("br"),s("span",{staticClass:"line-number"},[n._v("89")]),s("br"),s("span",{staticClass:"line-number"},[n._v("90")]),s("br"),s("span",{staticClass:"line-number"},[n._v("91")]),s("br"),s("span",{staticClass:"line-number"},[n._v("92")]),s("br"),s("span",{staticClass:"line-number"},[n._v("93")]),s("br"),s("span",{staticClass:"line-number"},[n._v("94")]),s("br"),s("span",{staticClass:"line-number"},[n._v("95")]),s("br"),s("span",{staticClass:"line-number"},[n._v("96")]),s("br"),s("span",{staticClass:"line-number"},[n._v("97")]),s("br"),s("span",{staticClass:"line-number"},[n._v("98")]),s("br"),s("span",{staticClass:"line-number"},[n._v("99")]),s("br"),s("span",{staticClass:"line-number"},[n._v("100")]),s("br"),s("span",{staticClass:"line-number"},[n._v("101")]),s("br"),s("span",{staticClass:"line-number"},[n._v("102")]),s("br"),s("span",{staticClass:"line-number"},[n._v("103")]),s("br"),s("span",{staticClass:"line-number"},[n._v("104")]),s("br"),s("span",{staticClass:"line-number"},[n._v("105")]),s("br"),s("span",{staticClass:"line-number"},[n._v("106")]),s("br")])]),s("blockquote",[s("p",[n._v("首先通过participant取得当前节点Node，然后根据当前节点Node的index去取arena中相对应的节点node。")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("前面提到过arena可以确保不同的slot在arena中是不会相冲突的，那么是怎么保证的呢？")])])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("arena = new Node[(FULL + 2) << ASHIFT];\n// 这个arena到底有多大呢? 我们先看FULL 和ASHIFT的定义：\nstatic final int FULL = (NCPU >= (MMASK << 1)) ? MMASK : NCPU >>> 1;\nprivate static final int ASHIFT = 7;\n\nprivate static final int NCPU = Runtime.getRuntime().availableProcessors();\nprivate static final int MMASK = 0xff;        // 255\n// 假如我的机器NCPU = 8 ，则得到的是768大小的arena数组。然后通过以下代码取得在arena中的节点：\n\nNode q = (Node)U.getObjectVolatile(a, j = (i << ASHIFT) + ABASE);\n// 它仍然是通过右移ASHIFT位来取得Node的，ABASE定义如下：\n\nClass<?> ak = Node[].class;\nABASE = U.arrayBaseOffset(ak) + (1 << ASHIFT);\n// U.arrayBaseOffset获取对象头长度，数组元素的大小可以通过unsafe.arrayIndexScale(T[].class) 方法获取到。这也就是说要访问类型为T的第N个元素的话，你的偏移量offset应该是arrayOffset+N*arrayScale。也就是说BASE = arrayOffset+ 128 。\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br")])]),s("ul",[s("li",[s("code",[n._v("用@sun.misc.Contended来规避伪共享？")])])]),n._v(" "),s("blockquote",[s("p",[s("code",[n._v("伪共享说明")]),n._v("：假设一个类的两个相互独立的属性a和b在内存地址上是连续的(比如FIFO队列的头尾指针)，那么它们通常会被加载到相同的cpu cache line里面。并发情况下，如果一个线程修改了a，会导致整个cache line失效(包括b)，这时另一个线程来读b，就需要从内存里再次加载了，这种多线程频繁修改ab的情况下，虽然a和b看似独立，但它们会互相干扰，非常影响性能。")])]),n._v(" "),s("blockquote",[s("p",[n._v("我们再看Node节点的定义, 在Java 8 中我们是可以利用sun.misc.Contended来规避伪共享的。所以说通过 << ASHIFT方式加上sun.misc.Contended，所以使得任意两个可用Node不会再同一个缓存行中。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("@sun.misc.Contended static final class Node{\n....\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("blockquote",[s("p",[n._v("我们再次回到arenaExchange()。取得arena中的node节点后，如果定位的节点q 不为空，且CAS操作成功，则交换数据，返回交换的数据，唤醒等待的线程。")])]),n._v(" "),s("ul",[s("li",[n._v("如果q等于null且下标在bound & MMASK范围之内，则尝试占领该位置，如果成功，则采用自旋 + 阻塞的方式进行等待交换数据。")]),n._v(" "),s("li",[n._v("如果下标不在bound & MMASK范围之内获取由于q不为null但是竞争失败的时候：消除p。加入bound 不等于当前节点的bond(b != p.bound)，则更新p.bound = b，collides = 0 ，i = m或者m - 1。如果冲突的次数不到m 获取m 已经为最大值或者修改当前bound的值失败，则通过增加一次collides以及循环递减下标i的值；否则更新当前bound的值成功：我们令i为m+1即为此时最大的下标。最后更新当前index的值。")])]),n._v(" "),s("h3",{attrs:{id:"更深入理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更深入理解"}},[n._v("#")]),n._v(" # 更深入理解")]),n._v(" "),s("ul",[s("li",[s("code",[n._v("SynchronousQueue对比？")])])]),n._v(" "),s("blockquote",[s("p",[n._v("Exchanger是一种线程间安全交换数据的机制。可以和之前分析过的SynchronousQueue对比一下：线程A通过SynchronousQueue将数据a交给线程B；线程A通过Exchanger和线程B交换数据，线程A把数据a交给线程B，同时线程B把数据b交给线程A。可见，SynchronousQueue是交给一个数据，Exchanger是交换两个数据。")])]),n._v(" "),s("ul",[s("li",[s("blockquote",[s("p",[s("code",[n._v("不同JDK实现有何差别？")])])]),n._v(" "),s("ul",[s("li",[n._v("在JDK5中Exchanger被设计成一个容量为1的容器，存放一个等待线程，直到有另外线程到来就会发生数据交换，然后清空容器，等到下一个到来的线程。")]),n._v(" "),s("li",[n._v("从JDK6开始，Exchanger用了类似ConcurrentMap的分段思想，提供了多个slot，增加了并发执行时的吞吐量。")])])])]),n._v(" "),s("blockquote",[s("p",[n._v("JDK1.6实现可以参考 这里在新窗口打开")])]),n._v(" "),s("h3",{attrs:{id:"exchanger示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exchanger示例"}},[n._v("#")]),n._v(" # Exchanger示例")]),n._v(" "),s("blockquote",[s("p",[n._v("来一个非常经典的并发问题：你有相同的数据buffer，一个或多个数据生产者，和一个或多个数据消费者。只是Exchange类只能同步2个线程，所以你只能在你的生产者和消费者问题中只有一个生产者和一个消费者时使用这个类。")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class Test {\n    static class Producer extends Thread {\n        private Exchanger<Integer> exchanger;\n        private static int data = 0;\n        Producer(String name, Exchanger<Integer> exchanger) {\n            super("Producer-" + name);\n            this.exchanger = exchanger;\n        }\n\n        @Override\n        public void run() {\n            for (int i=1; i<5; i++) {\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                    data = i;\n                    System.out.println(getName()+" 交换前:" + data);\n                    data = exchanger.exchange(data);\n                    System.out.println(getName()+" 交换后:" + data);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    static class Consumer extends Thread {\n        private Exchanger<Integer> exchanger;\n        private static int data = 0;\n        Consumer(String name, Exchanger<Integer> exchanger) {\n            super("Consumer-" + name);\n            this.exchanger = exchanger;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                data = 0;\n                System.out.println(getName()+" 交换前:" + data);\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                    data = exchanger.exchange(data);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(getName()+" 交换后:" + data);\n            }\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Exchanger<Integer> exchanger = new Exchanger<Integer>();\n        new Producer("", exchanger).start();\n        new Consumer("", exchanger).start();\n        TimeUnit.SECONDS.sleep(7);\n        System.exit(-1);\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br")])]),s("blockquote",[s("p",[n._v("可以看到，其结果可能如下：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Consumer- 交换前:0\nProducer- 交换前:1\nConsumer- 交换后:1\nConsumer- 交换前:0\nProducer- 交换后:0\nProducer- 交换前:2\nProducer- 交换后:0\nConsumer- 交换后:2\nConsumer- 交换前:0\nProducer- 交换前:3\nProducer- 交换后:0\nConsumer- 交换后:3\nConsumer- 交换前:0\nProducer- 交换前:4\nProducer- 交换后:0\nConsumer- 交换后:4\nConsumer- 交换前:0\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("h3",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[n._v("#")]),n._v(" # 参考文章")]),n._v(" "),s("ul",[s("li",[n._v("https://cloud.tencent.com/developer/article/1529492")]),n._v(" "),s("li",[n._v("https://coderbee.net/index.php/concurrent/20140424/897")]),n._v(" "),s("li",[n._v("https://www.cnblogs.com/wanly3643/p/3939552.html")]),n._v(" "),s("li",[n._v("https://www.iteye.com/blog/brokendreams-2253956")]),n._v(" "),s("li",[n._v("https://blog.csdn.net/u014634338/article/details/78385521")])])])}),[],!1,null,null,null);s.default=t.exports}}]);