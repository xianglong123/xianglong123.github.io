(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{743:function(a,n,s){"use strict";s.r(n);var e=s(0),t=Object(e.a)({},(function(){var a=this,n=a._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"java-8-optional类深度解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-8-optional类深度解析"}},[a._v("#")]),a._v(" Java 8 - Optional类深度解析")]),a._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),n("p",[a._v("对Java 8 Optional类进行深度解析。 @123")])]),a._v(" "),n("ul",[n("li",[a._v("Java 8 - Optional类深度解析\n"),n("ul",[n("li",[a._v("Optional类包含的方法\n"),n("ul",[n("li",[a._v("of")]),a._v(" "),n("li",[a._v("ofNullable")]),a._v(" "),n("li",[a._v("isPresent")]),a._v(" "),n("li",[a._v("get")]),a._v(" "),n("li",[a._v("ifPresent")]),a._v(" "),n("li",[a._v("orElse")]),a._v(" "),n("li",[a._v("orElseGet")]),a._v(" "),n("li",[a._v("orElseThrow")]),a._v(" "),n("li",[a._v("map")]),a._v(" "),n("li",[a._v("flatMap")]),a._v(" "),n("li",[a._v("filter")])])]),a._v(" "),n("li",[a._v("一些例子")]),a._v(" "),n("li",[a._v("参考")])])])]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("身为一名Java程序员，大家可能都有这样的经历: 调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。这正是一些类似Guava的外部API试图解决的问题。一些JVM编程语言比如Scala、Ceylon等已经将对在核心API中解决了这个问题。在我的前一篇文章中，介绍了Scala是如何解决了这个问题。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("新版本的Java，比如Java 8引入了一个新的Optional类。Optional类的Javadoc描述如下:")])]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。")])])]),a._v(" "),n("h3",{attrs:{id:"optional类包含的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#optional类包含的方法"}},[a._v("#")]),a._v(" # Optional类包含的方法")]),a._v(" "),n("h3",{attrs:{id:"of"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#of"}},[a._v("#")]),a._v(" # of")]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("为非null的值创建一个Optional。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("of方法通过工厂方法创建Optional类。需要注意的是，创建对象时传入的参数不能为null。如果传入参数为null，则抛出NullPointerException 。")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//调用工厂方法创建Optional实例\nOptional<String> name = Optional.of("Sanaulla");\n//传入参数为null，抛出NullPointerException.\nOptional<String> someNull = Optional.of(null);\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("h3",{attrs:{id:"ofnullable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ofnullable"}},[a._v("#")]),a._v(" # ofNullable")]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("ofNullable与of方法相似，唯一的区别是可以接受参数为null的情况。示例如下:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("//下面创建了一个不包含任何值的Optional实例\n//例如，值为'null'\nOptional empty = Optional.ofNullable(null);\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("h3",{attrs:{id:"ispresent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ispresent"}},[a._v("#")]),a._v(" # isPresent")]),a._v(" "),n("blockquote",[n("p",[a._v("非常容易理解")])]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("如果值存在返回true，否则返回false。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("类似下面的代码:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("//isPresent方法用来检查Optional实例中是否包含值\nif (name.isPresent()) {\n  //在Optional实例内调用get()返回已存在的值\n  System.out.println(name.get());//输出Sanaulla\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h3",{attrs:{id:"get"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[a._v("#")]),a._v(" # get")]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("如果Optional有值则将其返回，否则抛出NoSuchElementException。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("上面的示例中，get方法用来得到Optional实例中的值。下面我们看一个抛出NoSuchElementException的例子:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("//执行下面的代码会输出: No value present \ntry {\n  //在空的Optional实例上调用get()，抛出NoSuchElementException\n  System.out.println(empty.get());\n} catch (NoSuchElementException ex) {\n  System.out.println(ex.getMessage());\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("h3",{attrs:{id:"ifpresent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ifpresent"}},[a._v("#")]),a._v(" # ifPresent")]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("如果Optional实例有值则为其调用consumer，否则不做处理")])])]),a._v(" "),n("blockquote",[n("p",[a._v("要理解ifPresent方法，首先需要了解Consumer类。简答地说，Consumer类包含一个抽象方法。该抽象方法对传入的值进行处理，但没有返回值。Java8支持不用接口直接通过lambda表达式传入参数。")])]),a._v(" "),n("blockquote",[n("p",[a._v("如果Optional实例有值，调用ifPresent()可以接受接口段或lambda表达式。类似下面的代码:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//ifPresent方法接受lambda表达式作为参数。\n//lambda表达式对Optional的值调用consumer进行处理。\nname.ifPresent((value) -> {\n  System.out.println("The length of the value is: " + value.length());\n});\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h3",{attrs:{id:"orelse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#orelse"}},[a._v("#")]),a._v(" # orElse")]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("如果有值则将其返回，否则返回指定的其它值。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("如果Optional实例有值则将其返回，否则返回orElse方法传入的参数。示例如下:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//如果值不为null，orElse方法返回Optional实例的值。\n//如果为null，返回传入的消息。\n//输出: There is no value present!\nSystem.out.println(empty.orElse("There is no value present!"));\n//输出: Sanaulla\nSystem.out.println(name.orElse("There is some value!"));\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("h3",{attrs:{id:"orelseget"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#orelseget"}},[a._v("#")]),a._v(" # orElseGet")]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值。示例如下:")])])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//orElseGet与orElse方法类似，区别在于orElse传入的是默认值，\n//orElseGet可以接受一个lambda表达式生成默认值。\n//输出: Default Value\nSystem.out.println(empty.orElseGet(() -> "Default Value"));\n//输出: Sanaulla\nSystem.out.println(name.orElseGet(() -> "Default Value"));\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("h3",{attrs:{id:"orelsethrow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#orelsethrow"}},[a._v("#")]),a._v(" # orElseThrow")]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("如果有值则将其返回，否则抛出supplier接口创建的异常。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("在orElseGet方法中，我们传入一个Supplier接口。然而，在orElseThrow中我们可以传入一个lambda表达式或方法，如果值不存在来抛出异常。示例如下:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("try {\n  //orElseThrow与orElse方法类似。与返回默认值不同，\n  //orElseThrow会抛出lambda表达式或方法生成的异常 \n\n  empty.orElseThrow(ValueAbsentException::new);\n} catch (Throwable ex) {\n  //输出: No value present in the Optional instance\n  System.out.println(ex.getMessage());\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("blockquote",[n("p",[a._v("ValueAbsentException定义如下:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('class ValueAbsentException extends Throwable {\n\n  public ValueAbsentException() {\n    super();\n  }\n\n  public ValueAbsentException(String msg) {\n    super(msg);\n  }\n\n  @Override\n  public String getMessage() {\n    return "No value present in the Optional instance";\n  }\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br")])]),n("h3",{attrs:{id:"map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" # map")]),a._v(" "),n("blockquote",[n("p",[a._v("map方法文档说明如下:")])]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("map方法用来对Optional实例的值执行一系列操作。通过一组实现了Function接口的lambda表达式传入操作。如果你不熟悉Function接口，可以参考我的这篇博客。map方法示例如下:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//map方法执行传入的lambda表达式参数对Optional实例的值进行修改。\n//为lambda表达式的返回值创建新的Optional实例作为map方法的返回值。\nOptional<String> upperName = name.map((value) -> value.toUpperCase());\nSystem.out.println(upperName.orElse("No value found"));\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("h3",{attrs:{id:"flatmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#flatmap"}},[a._v("#")]),a._v(" # flatMap")]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map(Funtion)方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("flatMap方法与map方法类似，区别在于mapping函数的返回值不同。map方法的mapping函数返回值可以是任何类型T，而flatMap方法的mapping函数必须是Optional。")])]),a._v(" "),n("blockquote",[n("p",[a._v("参照map函数，使用flatMap重写的示例如下:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//flatMap与map(Function)非常类似，区别在于传入方法的lambda表达式的返回类型。\n//map方法中的lambda表达式返回值可以是任意类型，在map函数返回之前会包装为Optional。 \n//但flatMap方法中的lambda表达式返回值必须是Optionl实例。 \nupperName = name.flatMap((value) -> Optional.of(value.toUpperCase()));\nSystem.out.println(upperName.orElse("No value found"));//输出SANAULLA\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h3",{attrs:{id:"filter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[a._v("#")]),a._v(" # filter")]),a._v(" "),n("blockquote",[n("p",[a._v("filter个方法通过传入限定条件对Optional实例的值进行过滤。文档描述如下:")])]),a._v(" "),n("blockquote",[n("blockquote",[n("p",[a._v("如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。")])])]),a._v(" "),n("blockquote",[n("p",[a._v("读到这里，可能你已经知道如何为filter方法传入一段代码。是的，这里可以传入一个lambda表达式。对于filter函数我们应该传入实现了Predicate接口的lambda表达式。如果你不熟悉Predicate接口，可以参考这篇文章。")])]),a._v(" "),n("blockquote",[n("p",[a._v("现在我来看看filter的各种用法，下面的示例介绍了满足限定条件和不满足两种情况:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//filter方法检查给定的Option值是否满足某些条件。\n//如果满足则返回同一个Option实例，否则返回空Optional。\nOptional<String> longName = name.filter((value) -> value.length() > 6);\nSystem.out.println(longName.orElse("The name is less than 6 characters"));//输出Sanaulla\n\n//另一个例子是Optional值不满足filter指定的条件。\nOptional<String> anotherName = Optional.of("Sana");\nOptional<String> shortName = anotherName.filter((value) -> value.length() > 6);\n//输出: name长度不足6字符\nSystem.out.println(shortName.orElse("The name is less than 6 characters"));\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br")])]),n("h3",{attrs:{id:"一些例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一些例子"}},[a._v("#")]),a._v(" # 一些例子")]),a._v(" "),n("ul",[n("li",[a._v("一个综合例子")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('public class OptionalDemo {\n\n  public static void main(String[] args) {\n    //创建Optional实例，也可以通过方法返回值得到。\n    Optional<String> name = Optional.of("Sanaulla");\n\n    //创建没有值的Optional实例，例如值为\'null\'\n    Optional empty = Optional.ofNullable(null);\n\n    //isPresent方法用来检查Optional实例是否有值。\n    if (name.isPresent()) {\n      //调用get()返回Optional值。\n      System.out.println(name.get());\n    }\n\n    try {\n      //在Optional实例上调用get()抛出NoSuchElementException。\n      System.out.println(empty.get());\n    } catch (NoSuchElementException ex) {\n      System.out.println(ex.getMessage());\n    }\n\n    //ifPresent方法接受lambda表达式参数。\n    //如果Optional值不为空，lambda表达式会处理并在其上执行操作。\n    name.ifPresent((value) -> {\n      System.out.println("The length of the value is: " + value.length());\n    });\n\n    //如果有值orElse方法会返回Optional实例，否则返回传入的错误信息。\n    System.out.println(empty.orElse("There is no value present!"));\n    System.out.println(name.orElse("There is some value!"));\n\n    //orElseGet与orElse类似，区别在于传入的默认值。\n    //orElseGet接受lambda表达式生成默认值。\n    System.out.println(empty.orElseGet(() -> "Default Value"));\n    System.out.println(name.orElseGet(() -> "Default Value"));\n\n    try {\n      //orElseThrow与orElse方法类似，区别在于返回值。\n      //orElseThrow抛出由传入的lambda表达式/方法生成异常。\n      empty.orElseThrow(ValueAbsentException::new);\n    } catch (Throwable ex) {\n      System.out.println(ex.getMessage());\n    }\n\n    //map方法通过传入的lambda表达式修改Optonal实例默认值。 \n    //lambda表达式返回值会包装为Optional实例。\n    Optional<String> upperName = name.map((value) -> value.toUpperCase());\n    System.out.println(upperName.orElse("No value found"));\n\n    //flatMap与map(Funtion)非常相似，区别在于lambda表达式的返回值。\n    //map方法的lambda表达式返回值可以是任何类型，但是返回值会包装成Optional实例。\n    //但是flatMap方法的lambda返回值总是Optional类型。\n    upperName = name.flatMap((value) -> Optional.of(value.toUpperCase()));\n    System.out.println(upperName.orElse("No value found"));\n\n    //filter方法检查Optiona值是否满足给定条件。\n    //如果满足返回Optional实例值，否则返回空Optional。\n    Optional<String> longName = name.filter((value) -> value.length() > 6);\n    System.out.println(longName.orElse("The name is less than 6 characters"));\n\n    //另一个示例，Optional值不满足给定条件。\n    Optional<String> anotherName = Optional.of("Sana");\n    Optional<String> shortName = anotherName.filter((value) -> value.length() > 6);\n    System.out.println(shortName.orElse("The name is less than 6 characters"));\n\n  }\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br"),n("span",{staticClass:"line-number"},[a._v("39")]),n("br"),n("span",{staticClass:"line-number"},[a._v("40")]),n("br"),n("span",{staticClass:"line-number"},[a._v("41")]),n("br"),n("span",{staticClass:"line-number"},[a._v("42")]),n("br"),n("span",{staticClass:"line-number"},[a._v("43")]),n("br"),n("span",{staticClass:"line-number"},[a._v("44")]),n("br"),n("span",{staticClass:"line-number"},[a._v("45")]),n("br"),n("span",{staticClass:"line-number"},[a._v("46")]),n("br"),n("span",{staticClass:"line-number"},[a._v("47")]),n("br"),n("span",{staticClass:"line-number"},[a._v("48")]),n("br"),n("span",{staticClass:"line-number"},[a._v("49")]),n("br"),n("span",{staticClass:"line-number"},[a._v("50")]),n("br"),n("span",{staticClass:"line-number"},[a._v("51")]),n("br"),n("span",{staticClass:"line-number"},[a._v("52")]),n("br"),n("span",{staticClass:"line-number"},[a._v("53")]),n("br"),n("span",{staticClass:"line-number"},[a._v("54")]),n("br"),n("span",{staticClass:"line-number"},[a._v("55")]),n("br"),n("span",{staticClass:"line-number"},[a._v("56")]),n("br"),n("span",{staticClass:"line-number"},[a._v("57")]),n("br"),n("span",{staticClass:"line-number"},[a._v("58")]),n("br"),n("span",{staticClass:"line-number"},[a._v("59")]),n("br"),n("span",{staticClass:"line-number"},[a._v("60")]),n("br"),n("span",{staticClass:"line-number"},[a._v("61")]),n("br"),n("span",{staticClass:"line-number"},[a._v("62")]),n("br"),n("span",{staticClass:"line-number"},[a._v("63")]),n("br"),n("span",{staticClass:"line-number"},[a._v("64")]),n("br"),n("span",{staticClass:"line-number"},[a._v("65")]),n("br"),n("span",{staticClass:"line-number"},[a._v("66")]),n("br"),n("span",{staticClass:"line-number"},[a._v("67")]),n("br"),n("span",{staticClass:"line-number"},[a._v("68")]),n("br")])]),n("blockquote",[n("p",[a._v("上述代码输出如下:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Sanaulla\nNo value present\nThe length of the value is: 8\nThere is no value present!\nSanaulla\nDefault Value\nSanaulla\nNo value present in the Optional instance\nSANAULLA\nSANAULLA\nSanaulla\nThe name is less than 6 characters\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br")])]),n("ul",[n("li",[a._v("在 Java 8 中提高 Null 的安全性")])]),a._v(" "),n("blockquote",[n("p",[a._v("假设我们有一个像这样的类层次结构:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("class Outer {\n    Nested nested;\n    Nested getNested() {\n        return nested;\n    }\n}\nclass Nested {\n    Inner inner;\n    Inner getInner() {\n        return inner;\n    }\n}\nclass Inner {\n    String foo;\n    String getFoo() {\n        return foo;\n    }\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br")])]),n("blockquote",[n("p",[a._v("解决这种结构的深层嵌套路径是有点麻烦的。我们必须编写一堆 null 检查来确保不会导致一个 NullPointerException:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Outer outer = new Outer();\nif (outer != null && outer.nested != null && outer.nested.inner != null) {\n    System.out.println(outer.nested.inner.foo);\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("blockquote",[n("p",[a._v("我们可以通过利用 Java 8 的 Optional 类型来摆脱所有这些 null 检查。map 方法接收一个 Function 类型的 lambda 表达式，并自动将每个 function 的结果包装成一个 Optional 对象。这使我们能够在一行中进行多个 map 操作。Null 检查是在底层自动处理的。")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Optional.of(new Outer())\n    .map(Outer::getNested)\n    .map(Nested::getInner)\n    .map(Inner::getFoo)\n    .ifPresent(System.out::println);\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("blockquote",[n("p",[a._v("还有一种实现相同作用的方式就是通过利用一个 supplier 函数来解决嵌套路径的问题:")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Outer obj = new Outer();\nresolve(() -> obj.getNested().getInner().getFoo())\n    .ifPresent(System.out::println);\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("blockquote",[n("p",[a._v("调用 obj.getNested().getInner().getFoo()) 可能会抛出一个 NullPointerException 异常。在这种情况下，该异常将会被捕获，而该方法会返回 Optional.empty()。")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("public static <T> Optional<T> resolve(Supplier<T> resolver) {\n    try {\n        T result = resolver.get();\n        return Optional.ofNullable(result);\n    }\n    catch (NullPointerException e) {\n        return Optional.empty();\n    }\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("blockquote",[n("p",[a._v("请记住，这两个解决方案可能没有传统 null 检查那么高的性能。不过在大多数情况下不会有太大问题。")])]),a._v(" "),n("h3",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" # 参考")]),a._v(" "),n("blockquote",[n("p",[a._v("原文链接: javacodegeeks")])]),a._v(" "),n("blockquote",[n("p",[a._v("翻译: ImportNew.com - 高俊阳")])]),a._v(" "),n("blockquote",[n("p",[a._v("译文链接: http://www.importnew.com/6675.html")])]),a._v(" "),n("blockquote",[n("p",[a._v("转载请保留原文出处、译者和译文链接。")])])])}),[],!1,null,null,null);n.default=t.exports}}]);